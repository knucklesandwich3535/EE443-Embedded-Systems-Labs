
.ORG 0x0000
	RJMP ONRESET
.ORG 0x0002
	RJMP ISR_INT0   ;INT0 EXTERNAL INTERRUPT HANDLER
.ORG 0x0009
	RJMP ISR_TIMER0 ;TIMER0 OVERFLOW INTERRUPT HANDLER
.ORG 0x000E
	RJMP ISR_ADC  ;INT0 EXTERNAL INTERRUPT HANDLER

.include "macros.asm"
.include "display_functions.asm"

ONRESET:
	macro_setup
	macro_timer0
	macro_int0
	macro_adc			; calls for register init macro, defined in macros.asm
	SEI                 ; Enable global interrupts

	LDI R20, 0x01  
    LDI R21, 0x01

	
	//LDI R17, 0x0001
	//LDI R18, 0x0002
	//EEPROM_read


	;800 IN DECIMAL:
	LDI R31, 0x03	; HIGH BYTE
	LDI R30, 0x20	; LOW BYTE


MAIN:
	LDI R20, 0x01
	SBIS PINB , PORTB2
	RJMP BUTTON1_PRESSED		   
	SBIS PIND , PORTD2
	RJMP BUTTON2_PRESSED 
	
	CBI ADCSRA,ADFR ;SINGLE CONVERSION MODE

	CP R15, R31
	BREQ LOOP1
	BRLO LED_ON
	RCALL DELAY_EX
	RJMP MAIN


BUTTON1_PRESSED:
	SBIS PIND, PORTD2
	RJMP BUTTON_WAIT
	RCALL DELAY_EX
	MOV R31, R31
	RJMP MAIN


BUTTON2_PRESSED:
	SBIS PINB, PORTB2
	RJMP BUTTON_WAIT
	RCALL DELAY_EX
	MOV R31, R31
	RJMP MAIN


BUTTON_WAIT:
	SBIS PINB, PORTB2
	RJMP BUTTON_WAIT
	SBIS PIND, PORTD2
	RJMP BUTTON_WAIT
	RJMP CHECK

LOOP1:  
	CP R14 , R30
	BRLO LED_ON
	BRSH LED_OFF
	RJMP MAIN

LED_ON:
	SBI PORTB, 1
	RJMP MAIN

LED_OFF:
	CBI PORTB, 1
	RJMP MAIN

// if button pressed
CHECK:
	LDI R20, 0x00
	CBI PORTB, 1
	LDI R30, 0xF4
	LDI R31, 0x01
	SBIS PINB , PORTB2
	RJMP DEC_LOOP
	SBIS PIND , PORTD2
	RJMP INC_LOOP
	RJMP CHECK

DEC_LOOP:
	SBIS PIND, PORTD2
	RJMP LOOP4
	RCALL DELAY_EX
	DEC R30
	/*
	MOV R25, R30
	RCALL DELAY_EX
	CPI R25, 0x00
	BREQ DEC_R15
	RCALL DELAY_EX
	N1: SBIC PIND, PORTD2
		RJMP N1
		*/
	RJMP CHECK
	
	/*
DEC_R15:
	DEC R31
	LDI R30, 0xFF
	DEC R30
	RJMP CHECK
	*/

INC_LOOP:
	SBIC PINB, PORTB2
	RJMP LOOP4
	RCALL DELAY_EX
	INC R30
	/*
	MOV R25, R30
	RCALL DELAY_EX
	CPI R25, 0xFF
	BREQ INC_R15
	RCALL DELAY_EX
	N2: SBIC PIND, PORTD2
		RJMP N2
		*/
	RJMP CHECK
	
	/*
INC_R15:
	INC R31
	LDI R30, 0x00
	INC R30
	RJMP CHECK
	*/

LOOP4:
	RCALL DELAY_EX
	RJMP SAVE_TO_EEPROM

SAVE_TO_EEPROM:
	EEPROM_write
	SBI PORTB, 1
	RJMP MAIN

ISR_INT0:
	CLI				;DISABLE GLOBAL INTERRUPT ENABLE
	IN R26, SREG	;SAVE STATUS REGISTER
	//LDI	R30, 0xFF	
	//LDI	R31, 0x00
	OUT	 SREG, R26		;RELOAD STATUS REGISTER
    RETI					;RETURN FROM INT0 INTERRUPT HANDLER

ISR_TIMER0:
	CP R21, R20
	BREQ R14_R15
	CP R21, R20
	BRNE R30_R31
	RETI					;RETURN FROM TIMER0 INTERRUPT HANDLER

R30_R31:	MOV R14, R30
			MOV R15, R31
			macro_display R14, R15	
		
R14_R15:	macro_display R14,R15
		

ISR_ADC:
	CLI
	IN R14, ADCL         ; Read ADC low byte
	IN R15, ADCH         ; Read ADC high byte
	SBI ADCSRA,ADSC 
	RETI                 ; Return from interrupt
